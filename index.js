import mongoose from "mongoose";
import dotenv from "dotenv";
import express from "express";
import userRoutes from "./src/routes/user.js";
import movieRoutes from "./src/routes/movie.js";
import articleRoutes from "./src/routes/article.js";
import cors from "cors";
import compression from "compression";
dotenv.config();
import multer from "multer";
const FILES_STORAGE = "FILES_STORAGE";
import path from "path";

import { dirname } from "path";
import { fileURLToPath } from "url";
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const app = express();

const corsConfig = {
  credentials: "true",
  origin: "http://localhost:3000",
  optionSuccessStatus: "200",
};

app.use(compression());
app.use(cors(corsConfig));

app.use(express.json({ limit: "50mb" }));
app.use(express.urlencoded({ limit: "50mb" }));

app.use("/user", userRoutes);
app.use("/movie", movieRoutes);
app.use("/article", articleRoutes);

// Set up multer storage using disk storage
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, FILES_STORAGE + "/"); // Specify the directory where you want to store the files
  },
  filename: function (req, file, cb) {
    cb(null, Date.now() + "-" + file.originalname); // Use a unique filename
  },
});

const upload = multer({ storage: storage });
app.get("/uploader", (req, res) => {
  res.sendFile(path.join(__dirname, "index.html"));
});

app.post("/upload", upload.single("audioFile"), (req, res) => {
  const file = req.file;

  if (!file) {
    return res.status(400).json({ error: "No file provided" });
  }

  // Process the file (e.g., save it to disk, perform some operations, etc.)
  // For simplicity, let's just send back a success response with the file details.
  res.json({
    filename: file.filename, // Use the new filename generated by multer
    size: file.size,
    mimetype: file.mimetype,
  });
});

app.use("/", (req, res) => {
  res.json({
    status: "OK",
    message: "API working fine ",
    statusCode: 200,
  });
});

const PORT = process.env.PORT || 3300;

mongoose
  .connect(process.env.MONGO_URL)
  .then(() =>
    app.listen(PORT, () => {
      console.log(`Server is running on port ${PORT}`);
    })
  )
  .catch((err) => console.log(err));
